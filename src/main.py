import functools

from aiogram import executor, Bot, Dispatcher
from aiogram.types import ParseMode, BotCommand

import handlers
from config import get_app_settings
from middlewares import (
    DependencyInjectMiddleware,
)
from services.database_api import DatabaseAPIService
from services.dodo_api import DodoAPIService
from services.http_client_factory import closing_http_client_factory


async def setup_bot_commands(bot: Bot):
    await bot.set_my_commands([
        BotCommand('bonus_system', '–ë–æ–Ω—É—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'),
        BotCommand('cooking_time', '–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–æ–±—â–µ–µ)'),
        BotCommand('restaurant_cooking_time', '–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (—Ä–µ—Å—Ç–æ—Ä–∞–Ω)'),
        BotCommand('daily_revenue', '–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'),
        BotCommand('delivery_speed', '–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏'),
        BotCommand('delivery_awaiting_time', '–í—Ä–µ–º—è –Ω–∞ –ø–æ–ª–∫–µ'),
        BotCommand('kitchen_performance', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ö–Ω–∏'),
        BotCommand('delivery_performance', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏'),
        BotCommand('being_late_certificates', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ'),
        BotCommand('awaiting_orders', '–ó–∞–∫–∞–∑–æ–≤ –æ—Å—Ç—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–ª–∫–µ - –∫—É—Ä—å–µ—Ä—ã –≤—Å–µ–≥–æ / –≤ –æ—á–µ—Ä–µ–¥–∏'),
        BotCommand('productivity_balance', '–ë–∞–ª–∞–Ω—Å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'),
        BotCommand('start', 'üë®‚Äçüíª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        BotCommand('settings', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        BotCommand('reports', 'üîé –û—Ç—á—ë—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ'),
        BotCommand('show_keyboard', '–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'),
        BotCommand('hide_keyboard', '–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É'),
    ])


def register_all_handlers(dispatcher: Dispatcher):
    handlers.start.register_handlers(dispatcher)
    handlers.settings.register_handlers(dispatcher)
    handlers.reports.register_handlers(dispatcher)


async def on_startup(dispatcher: Dispatcher):
    register_all_handlers(dispatcher)
    await setup_bot_commands(dispatcher.bot)


def main():
    app_settings = get_app_settings()
    bot = Bot(app_settings.bot_token, parse_mode=ParseMode.HTML)
    dp = Dispatcher(bot)

    database_api_service = DatabaseAPIService(
        http_client_factory=functools.partial(
            closing_http_client_factory,
            base_url=app_settings.db_api_url,
        ),
    )
    dodo_api_service = DodoAPIService(
        http_client_factory=functools.partial(
            closing_http_client_factory,
            base_url=app_settings.api_url,
        ),
        country_code='ru',
    )
    dp.setup_middleware(
        DependencyInjectMiddleware(
            dodo_api_service=dodo_api_service,
            database_api_service=database_api_service,
        ),
    )

    executor.start_polling(
        dispatcher=dp,
        skip_updates=True,
        on_startup=on_startup,
    )


if __name__ == '__main__':
    main()
